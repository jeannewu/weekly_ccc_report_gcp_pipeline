install.packages("gridExtra")
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
queryrec <- "SELECT 117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-prod-6d04.Connect.participants` where Connect_ID IS NOT NULL"
bq_auth()
plumber::plumb(file='~/Documents/Pipelines/testPiplineCloudRun/stage/test_api.r')$run()
source("~/Documents/Pipelines/testPiplineCloudRun/stage/test_api.r")
rec_data <- bq_table_download(rec_table, bigint = "integer64")
# Data for example report
test_report_table <- head(rec_data)
library(bigrquery)
library(ggplot2)
# GCP Account Info
project = "nih-nci-dceg-connect-stg-5519"
billing= "nih-nci-dceg-connect-stg-5519"
# Query
queryrec <- "SELECT 117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-prod-6d04.Connect.participants` where Connect_ID IS NOT NULL"
# Authentication
bq_auth()
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table, bigint = "integer64")
# Data for example report
test_report_table <- head(rec_data)
age <- rec_data$RcrtUP_Age_v1r0
# Make Report
pdf('report_table.pdf')                   # Open a PDF
grid.table(test_report_table)             # Write table to PDF
ggplot(df, aes(x=age)) + geom_histogram() # Write histogram to PDF
# Generate contents of report
test_report_table <- head(rec_data)             # Example table for report
age <- rec_data$RcrtUP_Age_v1r0
p <- ggplot(df, aes(x=age)) + geom_histogram()  # Plot for report
# Generate contents of report
test_report_table <- head(rec_data)             # Example table for report
age <- rec_data$RcrtUP_Age_v1r0
p <- ggplot(test_report, aes(x=age)) + geom_histogram()  # Plot for report
# Generate contents of report
test_report_table <- head(rec_data)             # Example table for report
age <- rec_data$RcrtUP_Age_v1r0
p <- ggplot(age, aes(x=age)) + geom_histogram()  # Plot for report
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=age)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p1)                                          # Write histogram to PDF
print(p)                                          # Write histogram to PDF
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table, bigint = "integer")
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=age)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=age)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table, bigint = "integer64")
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=age)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table)
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=age)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=RcrtUP_Age_v1r0)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=RcrtUP_Age_v1r0)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Get data from GCP BigQuery
rec_table <- bq_project_query(project, queryrec)
rec_data <- bq_table_download(rec_table, bigint = "integer64")
# Generate contents of report
table <- head(rec_data)                            # Example table for report
p <- ggplot(table, aes(x=RcrtUP_Age_v1r0)) + geom_histogram()  # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Plot for report
p <- ggplot(table, aes(x=RcrtUP_Age_v1r0)) + geom_histogram(bins = 10)
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
print('Example text about the table below...')     # Write some text
grid.table(test_report_table)                      # Write table to PDF
print('Example text about the plot below...')
print(p)                                          # Write histogram to PDF
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
grid.table(test_report_table)                      # Write table to PDF
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
# Generate contents of report
table <- head(rec_data)             # Example table for report
p <- hist(table$RcrtUP_Age_v1r0)    # Plot for report
# Make Report
pdf('./report_table.pdf')                          # Open a PDF
grid.table(test_report_table)                      # Write table to PDF
print(p)                                          # Write histogram to PDF
dev.off()                                          # Close PDF
hist(table$RcrtUP_Age_v1r0)    # Plot for report
# Generate contents of report
table <- head(rec_data)             # Example table for report
hist(table$RcrtUP_Age_v1r0)    # Plot for report
# Generate contents of report
head(rec_data)             # Example table for report
# Query
queryrec <- "SELECT d_117249500 AS RcrtUP_Age_v1r0
FROM `nih-nci-dceg-connect-stg-5519.Connect.participants` where d_117249500 IS NOT NULL"
# Authentication
bq_auth()
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
set_default_gcp_project(project)
get_gcp_table_schema(project, table, schema_json, schema_csv)
reticulate::repl_python()
# project   <- "nih-nci-dceg-connect-prod-6d04"
# table       <- "Connect.module2_v2"
# schema_json <- "module2_v2-schema.json"
# schema      <- "module2_v2-schema.xlsx"
# sheet       <- NULL
# out_json    <- "module2_v2-lists-from-schema.json" # destination file
# out_csv     <- "module2_v2-variables-from-schema.csv"
# Generate the query from the schema in the form of a set of
# variables.csv and lists.json files.
out_json <- paste0(module,"-lists-from-schema.json")
out_csv  <- paste0(module,"-variables-from-schema.csv")
out <- filter_vars_from_schema(project, table, schema_csv, out_csv, out_json,
output_file_type = "json")
# Set output files to environment variables for easy cleanup later
Sys.setenv(OUT_JSON = out_json)
Sys.setenv(OUT_CSV = out_csv)
# Display
out$variables[0:10]
out$array_json[0:10]
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
library(jsonlite)
library(tools)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables so that python/bash have access
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
reticulate::repl_python()
library(jsonlite)
library(tools)
library(reticulate)
# Load helper functions
source("connect_analytics_helper_functions.R")
########### DEFINE PARAMETERS ###########################
# project   <- "nih-nci-dceg-connect-dev"
# project   <- "nih-nci-dceg-connect-stg-5519"
project     <- "nih-nci-dceg-connect-prod-6d04"
table       <- "Connect.module2_v2"
#########################################################
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Pass variables to python for later use
py$schema_json <- schema_json
py$schema_csv  <- schema_csv
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
reticulate::repl_python()
# Generate file names given table name
module      <- strsplit(table, split=".", fixed=TRUE)[[1]][2]
schema_json <- paste0(module, "-schema.json")
schema_csv  <- paste0(module, "-schema.csv")
# Store the file names as environment variables
Sys.setenv(SCHEMA_JSON = schema_json)
Sys.setenv(SCHEMA_CSV = schema_csv)
# Pass variables to python for later use
py$schema_json <- schema_json
py$schema_csv  <- schema_csv
# Set default GCP project
set_default_gcp_project(project)
# Get the table schema from GCP as a JSON file named schema_json
get_gcp_table_schema(project, table, schema_json)
reticulate::repl_python()
import boxr
library(boxr)
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
install.packages(c("bigrquery", "bit", "boot", "broom", "broom.helpers", "bslib", "cachem", "callr", "chron", "class", "cli", "codetools", "collections", "colorspace", "cpp11", "crayon", "curl", "data.table", "dbplyr", "desc", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "finalfit", "fontawesome", "forcats", "foreign", "formatR", "fs", "future", "gargle", "gert", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gh", "gitcreds", "globals", "googleAnalyticsR", "googlePubsubR", "gt", "gtable", "gtools", "gtsummary", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "languageserver", "listenv", "lubridate", "markdown", "MASS", "Matrix", "measurementProtocol", "mgcv", "modelr", "naniar", "nlme", "openssl", "openxlsx", "parallelly", "pbkrtest", "pkgdown", "pkgload", "plumber", "plyr", "png", "processx", "pryr", "ps", "purrr", "qpdf", "R.utils", "ragg", "Rcpp", "RcppTOML", "readr", "readxl", "reticulate", "rmarkdown", "roxygen2", "RSQLite", "rstatix", "sass", "shiny", "sourcetools", "spatial", "stringi", "stringr", "styler", "survival", "svglite", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "utf8", "vctrs", "visdat", "vroom", "whisker", "xfun", "yaml", "zip"))
knit_with_parameters("~/Documents/connectAnalyticsPipelines/weekly_ccc_report_gcp_pipeline/ccc_weekly_metrics.Rmd")
?knit_with_parameters
??knit_with_parameters
library(tools)
# Define parameters
rmd_file_name    <- "ccc_weekly_metrics.Rmd"
source("~/Documents/connectAnalyticsPipelines/weekly_ccc_report_gcp_pipeline/ccc_weekly_metrics_api.R", echo=TRUE)
setwd("~/Documents/connectAnalyticsPipelines/weekly_ccc_report_gcp_pipeline")
# Define parameters
rmd_file_name    <- "ccc_weekly_metrics.Rmd"
source("~/Documents/connectAnalyticsPipelines/weekly_ccc_report_gcp_pipeline/ccc_weekly_metrics_api.R", echo=TRUE)
tinytex::tlmgr_install('threepartablex')
plumb(file='ccc_weekly_metrics_api.R')$run()
